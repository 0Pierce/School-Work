package com.example.demo;

import java.math.BigDecimal;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

//Name: Pierce
//Student Number:301247432
//Submission date: Oct 14, 2024


@Controller
public class OrderController {

    
	//Arrays that fill the select drop boxes
	
	//I grabbed these countries from an autogenerated list, I did not write these out by hand
	private final String[] countries = {
		    "Afghanistan", "Albania", "Algeria", "Andorra", "Angola", "Antigua and Barbuda", 
		    "Argentina", "Armenia", "Australia", "Austria", "Azerbaijan", 
		    "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", 
		    "Belize", "Benin", "Bhutan", "Bolivia", "Bosnia and Herzegovina", 
		    "Botswana", "Brazil", "Brunei", "Bulgaria", "Burkina Faso", "Burundi", 
		    "Cabo Verde", "Cambodia", "Cameroon", "Canada", "Central African Republic", 
		    "Chad", "Chile", "China", "Colombia", "Comoros", "Congo", 
		    "Costa Rica", "Croatia", "Cuba", "Cyprus", "Czech Republic", 
		    "Denmark", "Djibouti", "Dominica", "Dominican Republic", "Ecuador", 
		    "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", 
		    "Eswatini", "Ethiopia", "Fiji", "Finland", "France", "Gabon", 
		    "Gambia", "Georgia", "Germany", "Ghana", "Greece", "Grenada", 
		    "Guatemala", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", 
		    "Honduras", "Hungary", "Iceland", "India", "Indonesia", 
		    "Iran", "Iraq", "Ireland", "Israel", "Italy", "Jamaica", 
		    "Japan", "Jordan", "Kazakhstan", "Kenya", "Kiribati", 
		    "Kuwait", "Kyrgyzstan", "Laos", "Latvia", "Lebanon", 
		    "Lesotho", "Liberia", "Libya", "Liechtenstein", "Lithuania", 
		    "Luxembourg", "Madagascar", "Malawi", "Malaysia", "Maldives", 
		    "Mali", "Malta", "Marshall Islands", "Mauritania", "Mauritius", 
		    "Mexico", "Micronesia", "Moldova", "Monaco", "Mongolia", 
		    "Montenegro", "Morocco", "Mozambique", "Myanmar", "Namibia", 
		    "Nauru", "Nepal", "Netherlands", "New Zealand", "Nicaragua", 
		    "Niger", "Nigeria", "North Korea", "North Macedonia", "Norway", 
		    "Oman", "Pakistan", "Palau", "Palestine", "Panama", 
		    "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Poland", 
		    "Portugal", "Qatar", "Romania", "Russia", "Rwanda", 
		    "Saint Kitts and Nevis", "Saint Lucia", "Saint Vincent and the Grenadines", 
		    "Samoa", "San Marino", "Sao Tome and Principe", "Saudi Arabia", 
		    "Senegal", "Serbia", "Seychelles", "Sierra Leone", "Singapore", 
		    "Slovakia", "Slovenia", "Solomon Islands", "Somalia", "South Africa", 
		    "South Korea", "South Sudan", "Spain", "Sri Lanka", "Sudan", 
		    "Suriname", "Sweden", "Switzerland", "Syria", "Tajikistan", 
		    "Tanzania", "Thailand", "Timor-Leste", "Togo", "Tonga", 
		    "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", 
		    "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates", 
		    "United Kingdom", "United States", "Uruguay", "Uzbekistan", 
		    "Vanuatu", "Vatican City", "Venezuela", "Vietnam", "Yemen", 
		    "Zambia", "Zimbabwe"
		};

    private final String[] phoneBrands = {"Apple", "Samsung", "Google"};
    private final String[] phoneModels = {
        "iPhone XR", "iPhone 10", "iPhone 11", "iPhone 12",
        "Galaxy S24", "Galaxy S23", "Pixel 5", "Pixel 6"
    };

    
    //Loads array data for the HTML side
//    @GetMapping("/")
    public String showOrderForm(Model model) {
        model.addAttribute("countries", countries);
        model.addAttribute("phoneBrands", phoneBrands);
        model.addAttribute("phoneModels", phoneModels);
        return "index"; 
    }

    
    //Gets the variables from the html form
    @PostMapping("/submit")
    public ModelAndView submitOrder(
            @RequestParam("firstName") String firstName,
            @RequestParam("middleName") String middleName,
            @RequestParam("lastName") String lastName,
            @RequestParam("email") String email,
            @RequestParam("areaCode") String areaCode,
            @RequestParam("phoneNumber") String phoneNumber,
            @RequestParam("streetAddress") String streetAddress,
            @RequestParam("streetAddress2") String streetAddress2,
            @RequestParam("city") String city,
            @RequestParam("state") String state,
            @RequestParam("postalCode") String postalCode,
            @RequestParam("country") String country,
            @RequestParam("phoneBrand") String phoneBrand,
            @RequestParam("phoneModel") String phoneModel,
            @RequestParam("quantity") int quantity) {

    	//defines all the prices
        double phonePrice = 0;
        if (phoneModel.equals("iPhone XR")) phonePrice = 999.99;
        else if (phoneModel.equals("iPhone 10")) phonePrice = 899.99;
        else if (phoneModel.equals("iPhone 11")) phonePrice = 1099.99;
        else if (phoneModel.equals("iPhone 12")) phonePrice = 1199.99;
        else if (phoneModel.equals("Galaxy S24")) phonePrice = 1099.99;
        else if (phoneModel.equals("Galaxy S23")) phonePrice = 999.99;
        else if (phoneModel.equals("Pixel 5")) phonePrice = 699.99;
        else if (phoneModel.equals("Pixel 6")) phonePrice = 799.99;

        
        //Calc the total price
        double totalPrice = phonePrice * quantity;
        
        //Rounds to 2 decimal places
        totalPrice = Math.round(totalPrice * 100.0) / 100.0;
        
        
        //Creates a new order and sets all of its fields
        Order order = new Order();
        order.setFirstName(firstName);
        order.setMiddleName(middleName);
        order.setLastName(lastName);
        order.setEmail(email);
        order.setAreaCode(areaCode);
        order.setPhoneNumber(phoneNumber);
        order.setStreetAddress(streetAddress);
        order.setStreetAddress2(streetAddress2);
        order.setCity(city);
        order.setState(state);
        order.setPostalCode(postalCode);
        order.setCountry(country);
        order.setPhoneBrand(phoneBrand);
        order.setPhoneModel(phoneModel);
        order.setPhonePrice(phonePrice); 
        order.setQuantity(quantity);       
        order.setTotalPrice(totalPrice);   

        
        //Opens the show order 
        ModelAndView modelAndView = new ModelAndView("show-order");
        modelAndView.addObject("order", order);
        
        return modelAndView;
    }
}

